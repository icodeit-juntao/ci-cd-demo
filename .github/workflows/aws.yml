name: Build application and publish Docker image

on:
  push:
    branches: [ "main" ]

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: h6k2g2l3/icodeit
  ECS_SERVICE: quotes-service
  ECS_CLUSTER: devcluster
  ECS_TASK_DEFINITION: .aws/task-def.json
  CONTAINER_NAME: quotes-service
  DOCKER_IMAGE: public.ecr.aws/h6k2g2l3/icodeit:latest

permissions:
  contents: read

jobs:
  transpile:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.14.2
          cache: npm

      - name: Install
        run: npm ci

      - name: Compile
        run: npm run compile

  tests:
    name: End to End Tests
    runs-on: ubuntu-latest
    needs: transpile

    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.14.2
          cache: npm

      - name: Install
        run: npm ci

      - name: Unit tests
        run: npm test

      - name: Integration tests
        run: echo "integration tests..."

  packaging:
    name: Packaging
    runs-on: ubuntu-latest
    environment: staging
    needs: tests

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env: 
        AWS_REGION: us-east-1
      with:
        registry-type: public

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
