# version: 2
# jobs:
#   build:
#     docker:
#       - image: circleci/node:10
#     steps:
#       - checkout
#       - setup_remote_docker
#       - run:
#           name: Install dependencies
#           command: npm install
#       - run:
#           name: Run tests
#           command: npm test
#       - run:
#           name: Build Docker image
#           command: |
#             docker build -t $AWS_ECR_URI/icodeit:latest .
#       - run:
#           name: Push Docker image to AWS ECR
#           command: |
#             $(aws ecr get-login --no-include-email --region us-west-2)
#             docker push $AWS_ECR_URI/icodeit:latest

#   deploy:
#     docker:
#       - image: circleci/python:3.7
#     steps:
#       - run:
#           name: Install AWS CLI
#           command: pip install awscli
#       - run:
#           name: Deploy to AWS ECS
#           command: |
#             aws ecs update-service --region us-west-2 --cluster my-cluster --service my-service --force-new-deployment

# workflows:
#   version: 2
#   build-deploy:
#     jobs:
#       - build
#       - deploy:
#           requires:
#             - build
#           filters:
#             branches:
#               only: main

version: 2.1 # 2.1 config required to use orbs

orbs:
  aws-ecr: circleci/aws-ecr@8.1.2 # use the AWS ECR orb
  aws-ecs: circleci/aws-ecs@3.2.0 # use the AWS ECS orb
  aws-cli: circleci/aws-cli@3.1.1 # use the AWS CLI orb

jobs:
  build:
    machine:
      - image: ubuntu-2204:2023.02.1  
    docker:
      - image: cimg/node:14.18.2
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Run tests
          command: npm test

workflows:
  build-and-push:
    jobs:
      - build
      - aws-ecr/build-and-push-image:
          filters:
            branches:
              only: main
          requires: 
            - build
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          platform: linux/amd64
          public-registry: true
          region: '${AWS_REGION}'
          dockerfile: Dockerfile
          repo: icodeit
          tag: latest

# workflows:
#   build-and-deploy:
#     jobs:
#       - build
#       - aws-ecr/build-and-push-image: # orb built-in job
#           repo: '${MY_APP_PREFIX}'
#           tag: '${CIRCLE_SHA1}'
#           requires: 
#             - build
#       - aws-ecs/deploy-service-update: # orb built-in job
#           requires:
#             - aws-ecr/build-and-push-image
#           family: '${MY_APP_PREFIX}-service'
#           cluster: '${MY_APP_PREFIX}-cluster'
#           container-image-name-updates: 'container=${MY_APP_PREFIX}-service,tag=${CIRCLE_SHA1}'




# jobs:
#   build:
#     docker:
#       - image: circleci/node:10
#     steps:
#       - checkout
#       - setup_remote_docker
#       - run:
#           name: Install dependencies
#           command: npm install
#       - run:
#           name: Run tests
#           command: npm test
#       - run:
#           name: Build Docker image
#           command: |
#             docker build -t $AWS_ECR_URI/icodeit:latest .
#       - run:
#           name: Push Docker image to AWS ECR
#           command: |
#             $(aws ecr get-login --no-include-email --region us-west-2)
#             docker push $AWS_ECR_URI/icodeit:latest

#   verify-deployment:
#     executor: aws-cli/default
#     steps:
#       - aws-cli/install
#       - aws-cli/setup:
#           aws-access-key-id: AWS_SECRET_ACCESS_KEY
#           aws-region: AWS_DEFAULT_REGION
#           aws-secret-access-key: AWS_DEFAULT_REGION
#       - run:
#           name: Get last task definition
#           command: >
#             TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
#                 --task-definition ${MY_APP_PREFIX}-service \
#                 --output text \
#                 --query 'taskDefinition.taskDefinitionArn')
#             echo "export TASK_DEFINITION_ARN='${TASK_DEFINITION_ARN}'" >>
#             "$BASH_ENV"
#       - aws-ecs/verify-revision-is-deployed:
#           family: '${MY_APP_PREFIX}-service'
#           cluster: '${MY_APP_PREFIX}-cluster'
#           task-definition-arn: '${TASK_DEFINITION_ARN}'

# workflows:
#   build-and-deploy:
#     jobs:
#       - build # build and publish to ECR
#       - aws-ecr/build-and-push-image: # orb built-in job
#           repo: '${MY_APP_PREFIX}'
#           tag: '${CIRCLE_SHA1}'
#       - aws-ecs/deploy-service-update: # orb built-in job
#           requires:
#             - aws-ecr/build-and-push-image
#           family: '${MY_APP_PREFIX}-service'
#           cluster: '${MY_APP_PREFIX}-cluster'
#           container-image-name-updates: 'container=${MY_APP_PREFIX}-service,tag=${CIRCLE_SHA1}'
#       - verify-deployment:
#           requires:
#             - aws-ecs/deploy-service-update              


# version: 2.1
# orbs:
#   aws-ecr: circleci/aws-ecr@8.1.2 # use the AWS ECR orb
#   aws-ecs: circleci/aws-ecs@3.2.0 # use the AWS ECS orb
#   aws-cli: circleci/aws-cli@3.1.1 # use the AWS CLI orb

# workflows:
#   build-and-deploy:
#     jobs:
#       - aws-ecr/build-and-push-image:
#           account-url: AWS_ECR_ACCOUNT_URL
#           aws-access-key-id: AWS_ACCESS_KEY_ID
#           aws-secret-access-key: AWS_SECRET_ACCESS_KEY
#           region: AWS_REGION
#           repo: icodeit
#           tag: ${CIRCLE_SHA1}
#           create-repo: true
#           path: Dockerfile
#           requires:
#             - setup
#       - aws-ecs/deploy-service-update:
#           requires:
#             - aws-ecr/build-and-push-image
#           family: your-service-name
#           cluster-name: arn:aws:ecs:ap-southeast-2:775244835660:cluster/devcluster
#           container-image-name-updates: "container=your-container-name,image-and-tag=${AWS_ECR_ACCOUNT_URL}/your-repo-name:${CIRCLE_SHA1}"
#           aws-access-key-id: AWS_ACCESS_KEY_ID
#           aws-secret-access-key: AWS_SECRET_ACCESS_KEY
#           region: AWS_REGION
